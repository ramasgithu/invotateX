<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ResuMatch - Resume Job Matcher</title>
    <style>
        :root {
            --primary: #2563eb;
            --primary-light: #3b82f6;
            --primary-dark: #1d4ed8;
            --success: #10b981;
            --warning: #f59e0b;
            --danger: #ef4444;
            --gray-100: #f3f4f6;
            --gray-200: #e5e7eb;
            --gray-300: #d1d5db;
            --gray-400: #9ca3af;
            --gray-500: #6b7280;
            --gray-600: #4b5563;
            --gray-700: #374151;
            --gray-800: #1f2937;
            --gray-900: #111827;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: var(--gray-100);
            color: var(--gray-800);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 1rem;
        }

        header {
            background-color: white;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            position: sticky;
            top: 0;
            z-index: 100;
        }

        .navbar {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
        }

        .logo {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary);
            text-decoration: none;
        }

        .logo span {
            color: var(--gray-800);
        }

        .logo-icon {
            width: 32px;
            height: 32px;
            background-color: var(--primary);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }

        .nav-links {
            display: flex;
            gap: 2rem;
        }

        .nav-link {
            color: var(--gray-600);
            text-decoration: none;
            font-weight: 500;
            transition: color 0.2s;
        }

        .nav-link:hover {
            color: var(--primary);
        }

        .nav-link.active {
            color: var(--primary);
            font-weight: 600;
        }

        .main {
            padding: 2rem 0;
        }

        .hero {
            background-color: white;
            border-radius: 12px;
            padding: 3rem 2rem;
            text-align: center;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }

        .hero h1 {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: var(--gray-900);
        }

        .hero p {
            font-size: 1.1rem;
            color: var(--gray-600);
            max-width: 800px;
            margin: 0 auto 2rem;
        }

        .upload-section {
            background-color: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
        }

        .section-title {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
            color: var(--gray-800);
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .section-title span {
            background-color: var(--primary);
            color: white;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
        }

        .upload-box {
            border: 2px dashed var(--gray-300);
            border-radius: 8px;
            padding: 3rem 2rem;
            text-align: center;
            cursor: pointer;
            transition: border-color 0.3s, background-color 0.3s;
        }

        .upload-box:hover {
            border-color: var(--primary);
            background-color: rgba(37, 99, 235, 0.03);
        }

        .upload-icon {
            font-size: 3rem;
            color: var(--primary);
            margin-bottom: 1rem;
        }

        .upload-text {
            font-size: 1.1rem;
            color: var(--gray-600);
            margin-bottom: 1rem;
        }

        .file-types {
            font-size: 0.9rem;
            color: var(--gray-500);
        }

        .file-input {
            display: none;
        }

        .btn {
            display: inline-block;
            padding: 0.75rem 1.5rem;
            background-color: var(--primary);
            color: white;
            border: none;
            border-radius: 6px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
            text-decoration: none;
        }

        .btn:hover {
            background-color: var(--primary-dark);
        }

        .btn-outline {
            background-color: transparent;
            border: 1px solid var(--primary);
            color: var(--primary);
        }

        .btn-outline:hover {
            background-color: var(--primary);
            color: white;
        }

        .btn-success {
            background-color: var(--success);
        }

        .btn-success:hover {
            background-color: #0da271;
        }

        .btn-danger {
            background-color: var(--danger);
        }

        .btn-danger:hover {
            background-color: #dc2626;
        }

        .skills-section,
        .jobs-section {
            background-color: white;
            border-radius: 12px;
            padding: 2rem;
            margin-bottom: 2rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            display: none;
        }

        .skills-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 1rem;
            margin-bottom: 1.5rem;
        }

        .skill-item {
            background-color: var(--gray-100);
            border-radius: 6px;
            padding: 0.75rem;
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .skill-icon {
            width: 24px;
            height: 24px;
            background-color: var(--primary-light);
            border-radius: 4px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 0.9rem;
        }

        .skill-name {
            font-weight: 500;
        }

        .skill-level {
            margin-top: 0.25rem;
            height: 6px;
            background-color: var(--gray-300);
            border-radius: 3px;
            overflow: hidden;
        }

        .skill-level-bar {
            height: 100%;
            background-color: var(--primary);
        }

        .skills-actions {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-top: 1.5rem;
        }

        .jobs-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .job-card {
            border: 1px solid var(--gray-200);
            border-radius: 8px;
            overflow: hidden;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .job-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 10px 15px rgba(0, 0, 0, 0.1);
        }

        .job-header {
            padding: 1rem;
            border-bottom: 1px solid var(--gray-200);
            display: flex;
            align-items: center;
            gap: 1rem;
        }

        .company-logo {
            width: 48px;
            height: 48px;
            background-color: var(--gray-100);
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            color: var(--primary);
        }

        .job-title {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--gray-900);
            margin-bottom: 0.25rem;
        }

        .company-name {
            font-size: 0.9rem;
            color: var(--gray-600);
        }

        .job-body {
            padding: 1rem;
        }

        .job-details {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .job-detail {
            display: flex;
            flex-direction: column;
            font-size: 0.9rem;
        }

        .detail-label {
            color: var(--gray-500);
            margin-bottom: 0.25rem;
        }

        .detail-value {
            font-weight: 500;
            color: var(--gray-800);
        }

        .job-description {
            font-size: 0.9rem;
            color: var(--gray-600);
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .match-percentage {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .match-progress {
            flex: 1;
            height: 6px;
            background-color: var(--gray-200);
            border-radius: 3px;
            overflow: hidden;
        }

        .match-bar {
            height: 100%;
            border-radius: 3px;
        }

        .high-match {
            background-color: var(--success);
        }

        .medium-match {
            background-color: var(--warning);
        }

        .low-match {
            background-color: var(--danger);
        }

        .match-text {
            font-size: 0.9rem;
            font-weight: 600;
        }

        .high-match-text {
            color: var(--success);
        }

        .medium-match-text {
            color: var(--warning);
        }

        .low-match-text {
            color: var(--danger);
        }

        .job-skills {
            display: flex;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .job-skill {
            font-size: 0.8rem;
            padding: 0.25rem 0.75rem;
            background-color: var(--gray-100);
            border-radius: 16px;
            color: var(--gray-700);
        }

        .matched-skill {
            background-color: rgba(16, 185, 129, 0.1);
            color: var(--success);
            font-weight: 500;
        }

        .job-actions {
            display: flex;
            justify-content: space-between;
        }

        .loading-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            display: none;
        }

        .spinner {
            width: 48px;
            height: 48px;
            border: 4px solid var(--gray-200);
            border-top: 4px solid var(--primary);
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-bottom: 1rem;
        }

        .loading-text {
            font-size: 1.1rem;
            color: var(--gray-700);
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .footer {
            background-color: white;
            padding: 2rem 0;
            border-top: 1px solid var(--gray-200);
        }

        .footer-content {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .footer-logo {
            font-size: 1.25rem;
            font-weight: 700;
            color: var(--primary);
        }

        .footer-logo span {
            color: var(--gray-800);
        }

        .footer-links {
            display: flex;
            gap: 1.5rem;
        }

        .footer-link {
            color: var(--gray-600);
            text-decoration: none;
            transition: color 0.2s;
        }

        .footer-link:hover {
            color: var(--primary);
        }

        .copyright {
            color: var(--gray-500);
            font-size: 0.9rem;
            margin-top: 1rem;
            text-align: center;
        }

        /* Modal styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
            display: none;
        }

        .modal {
            background-color: white;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid var(--gray-200);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--gray-900);
        }

        .modal-close {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1.5rem;
            color: var(--gray-500);
            transition: color 0.2s;
        }

        .modal-close:hover {
            color: var(--gray-800);
        }

        .modal-body {
            padding: 1.5rem;
        }

        .modal-footer {
            padding: 1rem 1.5rem;
            border-top: 1px solid var(--gray-200);
            display: flex;
            justify-content: flex-end;
            gap: 1rem;
        }

        /* Responsive styles */
        @media (max-width: 768px) {
            .nav-links {
                display: none;
            }

            .hero h1 {
                font-size: 2rem;
            }

            .skills-grid {
                grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            }

            .jobs-list {
                grid-template-columns: 1fr;
            }

            .footer-content {
                flex-direction: column;
                gap: 1.5rem;
            }
        }
    </style>
</head>
<body>
    <header>
        <div class="container">
            <nav class="navbar">
                <a href="#" class="logo">
                    <div class="logo-icon">R</div>
                    Resu<span>Match</span>
                </a>
                <div class="nav-links">
                    <a href="#" class="nav-link active">Home</a>
                    <a href="#" class="nav-link">Jobs</a>
                    <a href="#" class="nav-link">About</a>
                    <a href="#" class="nav-link">Contact</a>
                </div>
            </nav>
        </div>
    </header>

    <main class="main">
        <div class="container">
            <!-- Hero Section -->
            <section class="hero">
                <h1>Find Your Perfect Job Match</h1>
                <p>Upload your resume and let our AI-powered system analyze your skills and experience to match you with the most suitable job opportunities. Get personalized job recommendations in seconds.</p>
                <a href="#upload-section" class="btn">Get Started</a>
            </section>

            <!-- Upload Section -->
            <section id="upload-section" class="upload-section">
                <h2 class="section-title"><span>1</span> Upload Your Resume</h2>
                <div class="upload-box" id="upload-box">
                    <div class="upload-icon">📄</div>
                    <div class="upload-text">Drag & drop your resume here or click to browse</div>
                    <div class="file-types">Supported formats: PDF, DOCX, DOC, TXT</div>
                    <input type="file" id="file-input" class="file-input" accept=".pdf,.docx,.doc,.txt">
                </div>
            </section>

            <!-- Skills Section -->
            <section id="skills-section" class="skills-section">
                <h2 class="section-title"><span>2</span> Extracted Skills</h2>
                <div class="skills-grid" id="skills-grid">
                    <!-- Skills will be added here dynamically -->
                </div>
                <div class="skills-actions">
                    <button class="btn btn-outline" id="edit-skills-btn">Edit Skills</button>
                    <button class="btn" id="find-jobs-btn">Find Matching Jobs</button>
                </div>
            </section>

            <!-- Jobs Section -->
            <section id="jobs-section" class="jobs-section">
                <h2 class="section-title"><span>3</span> Job Matches</h2>
                <div class="jobs-list" id="jobs-list">
                    <!-- Jobs will be added here dynamically -->
                </div>
            </section>
        </div>
    </main>

    <footer class="footer">
        <div class="container">
            <div class="footer-content">
                <div class="footer-logo">Resu<span>Match</span></div>
                <div class="footer-links">
                    <a href="#" class="footer-link">Terms</a>
                    <a href="#" class="footer-link">Privacy</a>
                    <a href="#" class="footer-link">Help</a>
                    <a href="#" class="footer-link">Feedback</a>
                </div>
            </div>
            <div class="copyright">© 2025 ResuMatch. All rights reserved.</div>
        </div>
    </footer>

    <!-- Loading Overlay -->
    <div class="loading-overlay" id="loading-overlay">
        <div class="spinner"></div>
        <div class="loading-text" id="loading-text">Analyzing your resume...</div>
    </div>

    <!-- Skills Edit Modal -->
    <div class="modal-overlay" id="skills-modal-overlay">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title">Edit Skills</h3>
                <button class="modal-close" id="skills-modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div id="skills-edit-container">
                    <!-- Editable skills will be added here -->
                </div>
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="cancel-skills-edit">Cancel</button>
                <button class="btn" id="save-skills-edit">Save Changes</button>
            </div>
        </div>
    </div>

    <!-- Job Details Modal -->
    <div class="modal-overlay" id="job-modal-overlay">
        <div class="modal">
            <div class="modal-header">
                <h3 class="modal-title" id="job-modal-title">Job Details</h3>
                <button class="modal-close" id="job-modal-close">&times;</button>
            </div>
            <div class="modal-body" id="job-modal-body">
                <!-- Job details will be added here -->
            </div>
            <div class="modal-footer">
                <button class="btn btn-outline" id="close-job-details">Close</button>
                <button class="btn" id="apply-job">Apply Now</button>
            </div>
        </div>
    </div>

    <script>
      // DOM Elements
const uploadBox = document.getElementById('upload-box');
const fileInput = document.getElementById('file-input');
const skillsSection = document.getElementById('skills-section');
const skillsGrid = document.getElementById('skills-grid');
const editSkillsBtn = document.getElementById('edit-skills-btn');
const findJobsBtn = document.getElementById('find-jobs-btn');
const jobsSection = document.getElementById('jobs-section');
const jobsList = document.getElementById('jobs-list');
const loadingOverlay = document.getElementById('loading-overlay');
const loadingText = document.getElementById('loading-text');

// Modal Elements
const skillsModalOverlay = document.getElementById('skills-modal-overlay');
const skillsEditContainer = document.getElementById('skills-edit-container');
const skillsModalClose = document.getElementById('skills-modal-close');
const cancelSkillsEdit = document.getElementById('cancel-skills-edit');
const saveSkillsEdit = document.getElementById('save-skills-edit');
const jobModalOverlay = document.getElementById('job-modal-overlay');
const jobModalTitle = document.getElementById('job-modal-title');
const jobModalBody = document.getElementById('job-modal-body');
const jobModalClose = document.getElementById('job-modal-close');
const closeJobDetails = document.getElementById('close-job-details');
const applyJob = document.getElementById('apply-job');

// Sample data (in a real app, this would come from backend)
let extractedSkills = [];
let jobListings = [];

// File upload handlers
uploadBox.addEventListener('click', () => {
    fileInput.click();
});

uploadBox.addEventListener('dragover', (e) => {
    e.preventDefault();
    uploadBox.style.borderColor = 'var(--primary)';
    uploadBox.style.backgroundColor = 'rgba(37, 99, 235, 0.05)';
});

uploadBox.addEventListener('dragleave', () => {
    uploadBox.style.borderColor = 'var(--gray-300)';
    uploadBox.style.backgroundColor = '';
});

uploadBox.addEventListener('drop', (e) => {
    e.preventDefault();
    uploadBox.style.borderColor = 'var(--gray-300)';
    uploadBox.style.backgroundColor = '';
    
    if (e.dataTransfer.files.length) {
        handleFileUpload(e.dataTransfer.files[0]);
    }
});

fileInput.addEventListener('change', () => {
    if (fileInput.files.length) {
        handleFileUpload(fileInput.files[0]);
    }
});

function handleFileUpload(file) {
    // Check file type
    const validTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain'];
    if (!validTypes.includes(file.type)) {
        alert('Please upload a PDF, DOCX, DOC, or TXT file.');
        return;
    }

    // Show loading overlay
    loadingOverlay.style.display = 'flex';
    loadingText.textContent = 'Analyzing your resume...';

    // In a real app, you would send the file to a server for processing
    // For demo purposes, we'll simulate processing time and use sample data
    setTimeout(() => {
        // Simulate extracting skills from resume
        extractSkillsFromResume(file);
        
        // Update loading text
        loadingText.textContent = 'Matching with job opportunities...';
        
        // Simulate finding job matches
        setTimeout(() => {
            findJobMatches();
            loadingOverlay.style.display = 'none';
        }, 1500);
    }, 2000);
}

function extractSkillsFromResume(file) {
    // In a real app, this would involve NLP and text analysis
    // For demo, we'll use sample skills based on file name
    const fileName = file.name.toLowerCase();
    
    // Generate random skills based on common job categories
    extractedSkills = [];
    
    // Technical skills
    if (fileName.includes('dev') || fileName.includes('program') || fileName.includes('tech') || Math.random() > 0.5) {
        const techSkills = [
            { name: 'JavaScript', level: Math.floor(Math.random() * 40) + 60 },
            { name: 'HTML/CSS', level: Math.floor(Math.random() * 30) + 70 },
            { name: 'React', level: Math.floor(Math.random() * 50) + 50 },
            { name: 'Node.js', level: Math.floor(Math.random() * 60) + 40 },
            { name: 'Python', level: Math.floor(Math.random() * 50) + 40 },
            { name: 'SQL', level: Math.floor(Math.random() * 40) + 50 },
            { name: 'Git', level: Math.floor(Math.random() * 30) + 60 },
            { name: 'AWS', level: Math.floor(Math.random() * 70) + 30 }
        ];
        
        extractedSkills = extractedSkills.concat(techSkills.slice(0, Math.floor(Math.random() * 4) + 3));
    }
    
    // Design skills
    if (fileName.includes('design') || fileName.includes('ui') || fileName.includes('ux') || Math.random() > 0.7) {
        const designSkills = [
            { name: 'Figma', level: Math.floor(Math.random() * 40) + 60 },
            { name: 'Adobe XD', level: Math.floor(Math.random() * 50) + 50 },
            { name: 'Photoshop', level: Math.floor(Math.random() * 40) + 50 },
            { name: 'Illustrator', level: Math.floor(Math.random() * 60) + 40 },
            { name: 'UI Design', level: Math.floor(Math.random() * 30) + 60 },
            { name: 'UX Research', level: Math.floor(Math.random() * 50) + 50 }
        ];
        
        extractedSkills = extractedSkills.concat(designSkills.slice(0, Math.floor(Math.random() * 3) + 2));
    }
    
    // Marketing skills
    if (fileName.includes('market') || fileName.includes('seo') || fileName.includes('content') || Math.random() > 0.7) {
        const marketingSkills = [
            { name: 'SEO', level: Math.floor(Math.random() * 40) + 60 },
            { name: 'Content Writing', level: Math.floor(Math.random() * 30) + 60 },
            { name: 'Social Media', level: Math.floor(Math.random() * 30) + 70 },
            { name: 'Google Analytics', level: Math.floor(Math.random() * 50) + 50 },
            { name: 'Email Marketing', level: Math.floor(Math.random() * 40) + 50 },
            { name: 'PPC', level: Math.floor(Math.random() * 60) + 40 }
        ];
        
        extractedSkills = extractedSkills.concat(marketingSkills.slice(0, Math.floor(Math.random() * 3) + 2));
    }
    
    // Data science skills
    if (fileName.includes('data') || fileName.includes('analy') || fileName.includes('science') || Math.random() > 0.7) {
        const dataSkills = [
            { name: 'Data Analysis', level: Math.floor(Math.random() * 30) + 70 },
            { name: 'Excel', level: Math.floor(Math.random() * 20) + 80 },
            { name: 'Python', level: Math.floor(Math.random() * 40) + 60 },
            { name: 'R', level: Math.floor(Math.random() * 50) + 50 },
            { name: 'Tableau', level: Math.floor(Math.random() * 40) + 60 },
            { name: 'Machine Learning', level: Math.floor(Math.random() * 60) + 40 },
            { name: 'SQL', level: Math.floor(Math.random() * 30) + 70 }
        ];
        
        extractedSkills = extractedSkills.concat(dataSkills.slice(0, Math.floor(Math.random() * 3) + 2));
    }
    
    // Soft skills
    const softSkills = [
        { name: 'Communication', level: Math.floor(Math.random() * 20) + 80 },
        { name: 'Leadership', level: Math.floor(Math.random() * 30) + 70 },
        { name: 'Problem Solving', level: Math.floor(Math.random() * 25) + 75 },
        { name: 'Teamwork', level: Math.floor(Math.random() * 20) + 80 },
        { name: 'Time Management', level: Math.floor(Math.random() * 30) + 70 }
    ];
    
    extractedSkills = extractedSkills.concat(softSkills.slice(0, Math.floor(Math.random() * 3) + 2));
    
    // Update UI
    updateSkillsUI();
}

function updateSkillsUI() {
    skillsGrid.innerHTML = '';
    extractedSkills.forEach(skill => {
        const skillElement = document.createElement('div');
        skillElement.className = 'skill-item';
        skillElement.innerHTML = `
            <div class="skill-icon">S</div>
            <div class="skill-info">
                <div class="skill-name">${skill.name}</div>
                <div class="skill-level">
                    <div class="skill-level-bar" style="width: ${skill.level}%"></div>
                </div>
            </div>
        `;
        skillsGrid.appendChild(skillElement);
    });
    
    skillsSection.style.display = 'block';
}

function findJobMatches() {
    // In a real app, this would make an API call to find matching jobs
    // For demo, we'll generate random job matches
    const companies = ['TechCorp', 'StartupX', 'InnovateNow', 'DigitalFirst', 'FutureTech'];
    const locations = ['Remote', 'New York, NY', 'San Francisco, CA', 'London, UK', 'Berlin, DE'];
    const jobTitles = {
        tech: ['Senior Frontend Developer', 'Full Stack Engineer', 'React Developer', 'Software Architect'],
        design: ['UI/UX Designer', 'Product Designer', 'Creative Director', 'Visual Designer'],
        marketing: ['Digital Marketing Manager', 'SEO Specialist', 'Content Strategist', 'Growth Hacker'],
        data: ['Data Scientist', 'Data Analyst', 'Business Intelligence Analyst', 'Machine Learning Engineer']
    };
    
    jobListings = [];
    const numJobs = Math.floor(Math.random() * 4) + 3; // 3-6 jobs
    
    for (let i = 0; i < numJobs; i++) {
        const matchPercentage = Math.floor(Math.random() * 30) + 70; // 70-100%
        const category = Object.keys(jobTitles)[Math.floor(Math.random() * Object.keys(jobTitles).length)];
        const title = jobTitles[category][Math.floor(Math.random() * jobTitles[category].length)];
        const company = companies[Math.floor(Math.random() * companies.length)];
        const location = locations[Math.floor(Math.random() * locations.length)];
        const salary = `$${Math.floor(Math.random() * 50) + 100}k - $${Math.floor(Math.random() * 50) + 150}k`;
        
        jobListings.push({
            id: `job-${i + 1}`,
            title,
            company,
            location,
            salary,
            description: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.',
            matchPercentage,
            skills: extractedSkills.slice(0, Math.floor(Math.random() * 3) + 2).map(s => s.name)
        });
    }
    
    updateJobsUI();
}

function updateJobsUI() {
    jobsList.innerHTML = '';
    jobListings.forEach(job => {
        const jobElement = document.createElement('div');
        jobElement.className = 'job-card';
        jobElement.innerHTML = `
            <div class="job-header">
                <div class="company-logo">${job.company[0]}</div>
                <div>
                    <h3 class="job-title">${job.title}</h3>
                    <div class="company-name">${job.company}</div>
                </div>
            </div>
            <div class="job-body">
                <div class="job-details">
                    <div class="job-detail">
                        <span class="detail-label">Location</span>
                        <span class="detail-value">${job.location}</span>
                    </div>
                    <div class="job-detail">
                        <span class="detail-label">Salary</span>
                        <span class="detail-value">${job.salary}</span>
                    </div>
                </div>
                <div class="match-percentage">
                    <div class="match-progress">
                        <div class="match-bar ${job.matchPercentage >= 90 ? 'high-match' : job.matchPercentage >= 80 ? 'medium-match' : 'low-match'}" 
                             style="width: ${job.matchPercentage}%"></div>
                    </div>
                    <span class="match-text ${job.matchPercentage >= 90 ? 'high-match-text' : job.matchPercentage >= 80 ? 'medium-match-text' : 'low-match-text'}">
                        ${job.matchPercentage}% Match
                    </span>
                </div>
                <p class="job-description">${job.description}</p>
                <div class="job-skills">
                    ${job.skills.map(skill => `<span class="job-skill ${extractedSkills.some(s => s.name === skill) ? 'matched-skill' : ''}">${skill}</span>`).join('')}
                </div>
                <div class="job-actions">
                    <button class="btn btn-outline" onclick="showJobDetails('${job.id}')">View Details</button>
                    <button class="btn">Apply Now</button>
                </div>
            </div>
        `;
        jobsList.appendChild(jobElement);
    });
    
    jobsSection.style.display = 'block';
}

function showJobDetails(jobId) {
    const job = jobListings.find(j => j.id === jobId);
    if (!job) return;
    
    jobModalTitle.textContent = job.title;
    jobModalBody.innerHTML = `
        <div class="job-header">
            <div class="company-logo">${job.company[0]}</div>
            <div>
                <h3 class="job-title">${job.title}</h3>
                <div class="company-name">${job.company}</div>
            </div>
        </div>
        <div class="job-body">
            <div class="job-details">
                <div class="job-detail">
                    <span class="detail-label">Location</span>
                    <span class="detail-value">${job.location}</span>
                </div>
                <div class="job-detail">
                    <span class="detail-label">Salary</span>
                    <span class="detail-value">${job.salary}</span>
                </div>
            </div>
            <div class="match-percentage">
                <div class="match-progress">
                    <div class="match-bar ${job.matchPercentage >= 90 ? 'high-match' : job.matchPercentage >= 80 ? 'medium-match' : 'low-match'}" 
                         style="width: ${job.matchPercentage}%"></div>
                </div>
                <span class="match-text ${job.matchPercentage >= 90 ? 'high-match-text' : job.matchPercentage >= 80 ? 'medium-match-text' : 'low-match-text'}">
                    ${job.matchPercentage}% Match
                </span>
            </div>
            <p class="job-description">${job.description}</p>
            <div class="job-skills">
                ${job.skills.map(skill => `<span class="job-skill ${extractedSkills.some(s => s.name === skill) ? 'matched-skill' : ''}">${skill}</span>`).join('')}
            </div>
        </div>
    `;
    
    jobModalOverlay.style.display = 'flex';
}

// Modal event listeners
skillsModalClose.addEventListener('click', () => {
    skillsModalOverlay.style.display = 'none';
});

cancelSkillsEdit.addEventListener('click', () => {
    skillsModalOverlay.style.display = 'none';
});

jobModalClose.addEventListener('click', () => {
    jobModalOverlay.style.display = 'none';
});

closeJobDetails.addEventListener('click', () => {
    jobModalOverlay.style.display = 'none';
});

// Skills editing
editSkillsBtn.addEventListener('click', () => {
    skillsEditContainer.innerHTML = '';
    extractedSkills.forEach((skill, index) => {
        const skillElement = document.createElement('div');
        skillElement.className = 'skill-item';
        skillElement.innerHTML = `
            <div class="skill-icon">S</div>
            <div class="skill-info" style="flex-grow: 1;">
                <div class="skill-name">${skill.name}</div>
                <input type="range" min="0" max="100" value="${skill.level}" 
                       onchange="updateSkillLevel(${index}, this.value)" style="width: 100%;">
            </div>
        `;
        skillsEditContainer.appendChild(skillElement);
    });
    
    skillsModalOverlay.style.display = 'flex';
});

function updateSkillLevel(index, level) {
    extractedSkills[index].level = parseInt(level);
}

saveSkillsEdit.addEventListener('click', () => {
    updateSkillsUI();
    skillsModalOverlay.style.display = 'none';
});

// Find matching jobs
findJobsBtn.addEventListener('click', () => {
    loadingOverlay.style.display = 'flex';
    loadingText.textContent = 'Finding job matches...';
    
    setTimeout(() => {
        findJobMatches();
        loadingOverlay.style.display = 'none';
    }, 1500);
});
    </script>